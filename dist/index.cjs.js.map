{"version":3,"file":"index.cjs.js","sources":["../node_modules/fastbitset/FastBitSet.js","../src/query.ts","../src/entity.ts","../src/world.ts"],"sourcesContent":["/* FastBitSet.js : a fast bit set implementation in JavaScript.\n * (c) the authors\n * Licensed under the Apache License, Version 2.0.\n *\n * Speed-optimized BitSet implementation for modern browsers and JavaScript engines.\n *\n * A BitSet is an ideal data structure to implement a Set when values being stored are\n * reasonably small integers. It can be orders of magnitude faster than a generic set implementation.\n * The FastBitSet implementation optimizes for speed, leveraging commonly available features\n * like typed arrays.\n *\n * Simple usage :\n *  // var FastBitSet = require(\"fastbitset\");// if you use node\n *  var b = new FastBitSet();// initially empty\n *  b.add(1);// add the value \"1\"\n *  b.has(1); // check that the value is present! (will return true)\n *  b.add(2);\n *  console.log(\"\"+b);// should display {1,2}\n *  b.add(10);\n *  b.array(); // would return [1,2,10]\n *\n *  var c = new FastBitSet([1,2,3,10]); // create bitset initialized with values 1,2,3,10\n *  c.difference(b); // from c, remove elements that are in b\n *  c.change(b); // c will contain elements that are in b or in c, but not both\n *  var su = c.union_size(b);// compute the size of the union (bitsets are unchanged)\n *  c.union(b); // c will contain all elements that are in c and b\n *  var s1 = c.intersection_size(b);// compute the size of the intersection (bitsets are unchanged)\n *  c.intersection(b); // c will only contain elements that are in both c and b\n *  c = b.clone(); // create a (deep) copy of b and assign it to c.\n *  c.equals(b); // check whether c and b are equal\n *\n *   See README.md file for a more complete description.\n *\n * You can install the library under node with the command line\n *   npm install fastbitset\n */\n\n\"use strict\";\n\n// you can provide an iterable\nfunction FastBitSet(iterable) {\n  this.words = [];\n\n  if (iterable) {\n    if (Symbol && Symbol.iterator && iterable[Symbol.iterator] !== undefined) {\n      var iterator = iterable[Symbol.iterator]();\n      var current = iterator.next();\n      while (!current.done) {\n        this.add(current.value);\n        current = iterator.next();\n      }\n    } else {\n      for (var i = 0; i < iterable.length; i++) {\n        this.add(iterable[i]);\n      }\n    }\n  }\n}\n\n// Add the value (Set the bit at index to true)\nFastBitSet.prototype.add = function (index) {\n  this.resize(index);\n  this.words[index >>> 5] |= 1 << index;\n};\n\n// If the value was not in the set, add it, otherwise remove it (flip bit at index)\nFastBitSet.prototype.flip = function (index) {\n  this.resize(index);\n  this.words[index >>> 5] ^= 1 << index;\n};\n\n// Remove all values, reset memory usage\nFastBitSet.prototype.clear = function () {\n  this.words = [];\n};\n\n// Set the bit at index to false\nFastBitSet.prototype.remove = function (index) {\n  this.resize(index);\n  this.words[index >>> 5] &= ~(1 << index);\n};\n\n// Return true if no bit is set\nFastBitSet.prototype.isEmpty = function (index) {\n  var c = this.words.length;\n  for (var i = 0; i < c; i++) {\n    if (this.words[i] !== 0) return false;\n  }\n  return true;\n};\n\n// Is the value contained in the set? Is the bit at index true or false? Returns a boolean\nFastBitSet.prototype.has = function (index) {\n  return (this.words[index >>> 5] & (1 << index)) !== 0;\n};\n\n// Tries to add the value (Set the bit at index to true), return 1 if the\n// value was added, return 0 if the value was already present\nFastBitSet.prototype.checkedAdd = function (index) {\n  this.resize(index);\n  var word = this.words[index >>> 5];\n  var newword = word | (1 << index);\n  this.words[index >>> 5] = newword;\n  return (newword ^ word) >>> index;\n};\n\n// Reduce the memory usage to a minimum\nFastBitSet.prototype.trim = function (index) {\n  var nl = this.words.length;\n  while (nl > 0 && this.words[nl - 1] === 0) {\n    nl--;\n  }\n  this.words = this.words.slice(0, nl);\n};\n\n// Resize the bitset so that we can write a value at index\nFastBitSet.prototype.resize = function (index) {\n  var count = (index + 32) >>> 5; // just what is needed\n  for (var i = this.words.length; i < count; i++) this.words[i] = 0;\n};\n\n// fast function to compute the Hamming weight of a 32-bit unsigned integer\nFastBitSet.prototype.hammingWeight = function (v) {\n  v -= (v >>> 1) & 0x55555555; // works with signed or unsigned shifts\n  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);\n  return (((v + (v >>> 4)) & 0xf0f0f0f) * 0x1010101) >>> 24;\n};\n\n// fast function to compute the Hamming weight of four 32-bit unsigned integers\nFastBitSet.prototype.hammingWeight4 = function (v1, v2, v3, v4) {\n  v1 -= (v1 >>> 1) & 0x55555555; // works with signed or unsigned shifts\n  v2 -= (v2 >>> 1) & 0x55555555; // works with signed or unsigned shifts\n  v3 -= (v3 >>> 1) & 0x55555555; // works with signed or unsigned shifts\n  v4 -= (v4 >>> 1) & 0x55555555; // works with signed or unsigned shifts\n\n  v1 = (v1 & 0x33333333) + ((v1 >>> 2) & 0x33333333);\n  v2 = (v2 & 0x33333333) + ((v2 >>> 2) & 0x33333333);\n  v3 = (v3 & 0x33333333) + ((v3 >>> 2) & 0x33333333);\n  v4 = (v4 & 0x33333333) + ((v4 >>> 2) & 0x33333333);\n\n  v1 = (v1 + (v1 >>> 4)) & 0xf0f0f0f;\n  v2 = (v2 + (v2 >>> 4)) & 0xf0f0f0f;\n  v3 = (v3 + (v3 >>> 4)) & 0xf0f0f0f;\n  v4 = (v4 + (v4 >>> 4)) & 0xf0f0f0f;\n  return ((v1 + v2 + v3 + v4) * 0x1010101) >>> 24;\n};\n\n// How many values stored in the set? How many set bits?\nFastBitSet.prototype.size = function () {\n  var answer = 0;\n  var c = this.words.length;\n  var w = this.words;\n  var i = 0;\n  for (; i < c; i++) {\n    answer += this.hammingWeight(w[i]);\n  }\n  return answer;\n};\n\n// Return an array with the set bit locations (values)\nFastBitSet.prototype.array = function () {\n  var answer = new Array(this.size());\n  var pos = 0 | 0;\n  var c = this.words.length;\n  for (var k = 0; k < c; ++k) {\n    var w = this.words[k];\n    while (w != 0) {\n      var t = w & -w;\n      answer[pos++] = (k << 5) + this.hammingWeight((t - 1) | 0);\n      w ^= t;\n    }\n  }\n  return answer;\n};\n\n// Return an array with the set bit locations (values)\nFastBitSet.prototype.forEach = function (fnc) {\n  var c = this.words.length;\n  for (var k = 0; k < c; ++k) {\n    var w = this.words[k];\n    while (w != 0) {\n      var t = w & -w;\n      fnc((k << 5) + this.hammingWeight((t - 1) | 0));\n      w ^= t;\n    }\n  }\n};\n\n// Returns an iterator of set bit locations (values)\nFastBitSet.prototype[Symbol.iterator] = function* () {\n  var c = this.words.length;\n  for (var k = 0; k < c; ++k) {\n    var w = this.words[k];\n    while (w != 0) {\n      var t = w & -w;\n      yield (k << 5) + this.hammingWeight((t - 1) | 0);\n      w ^= t;\n    }\n  }\n};\n\n// Creates a copy of this bitmap\nFastBitSet.prototype.clone = function () {\n  var clone = Object.create(FastBitSet.prototype);\n  clone.words = this.words.slice();\n  return clone;\n};\n\n// Check if this bitset intersects with another one,\n// no bitmap is modified\nFastBitSet.prototype.intersects = function (otherbitmap) {\n  var newcount = Math.min(this.words.length, otherbitmap.words.length);\n  for (var k = 0 | 0; k < newcount; ++k) {\n    if ((this.words[k] & otherbitmap.words[k]) !== 0) return true;\n  }\n  return false;\n};\n\n// Computes the intersection between this bitset and another one,\n// the current bitmap is modified  (and returned by the function)\nFastBitSet.prototype.intersection = function (otherbitmap) {\n  var newcount = Math.min(this.words.length, otherbitmap.words.length);\n  var k = 0 | 0;\n  for (; k + 7 < newcount; k += 8) {\n    this.words[k] &= otherbitmap.words[k];\n    this.words[k + 1] &= otherbitmap.words[k + 1];\n    this.words[k + 2] &= otherbitmap.words[k + 2];\n    this.words[k + 3] &= otherbitmap.words[k + 3];\n    this.words[k + 4] &= otherbitmap.words[k + 4];\n    this.words[k + 5] &= otherbitmap.words[k + 5];\n    this.words[k + 6] &= otherbitmap.words[k + 6];\n    this.words[k + 7] &= otherbitmap.words[k + 7];\n  }\n  for (; k < newcount; ++k) {\n    this.words[k] &= otherbitmap.words[k];\n  }\n  var c = this.words.length;\n  for (var k = newcount; k < c; ++k) {\n    this.words[k] = 0;\n  }\n  return this;\n};\n\n// Computes the size of the intersection between this bitset and another one\nFastBitSet.prototype.intersection_size = function (otherbitmap) {\n  var newcount = Math.min(this.words.length, otherbitmap.words.length);\n  var answer = 0 | 0;\n  for (var k = 0 | 0; k < newcount; ++k) {\n    answer += this.hammingWeight(this.words[k] & otherbitmap.words[k]);\n  }\n\n  return answer;\n};\n\n// Computes the intersection between this bitset and another one,\n// a new bitmap is generated\nFastBitSet.prototype.new_intersection = function (otherbitmap) {\n  var answer = Object.create(FastBitSet.prototype);\n  var count = Math.min(this.words.length, otherbitmap.words.length);\n  answer.words = new Array(count);\n  var c = count;\n  var k = 0 | 0;\n  for (; k + 7 < c; k += 8) {\n    answer.words[k] = this.words[k] & otherbitmap.words[k];\n    answer.words[k + 1] = this.words[k + 1] & otherbitmap.words[k + 1];\n    answer.words[k + 2] = this.words[k + 2] & otherbitmap.words[k + 2];\n    answer.words[k + 3] = this.words[k + 3] & otherbitmap.words[k + 3];\n    answer.words[k + 4] = this.words[k + 4] & otherbitmap.words[k + 4];\n    answer.words[k + 5] = this.words[k + 5] & otherbitmap.words[k + 5];\n    answer.words[k + 6] = this.words[k + 6] & otherbitmap.words[k + 6];\n    answer.words[k + 7] = this.words[k + 7] & otherbitmap.words[k + 7];\n  }\n  for (; k < c; ++k) {\n    answer.words[k] = this.words[k] & otherbitmap.words[k];\n  }\n  return answer;\n};\n\n// Computes the intersection between this bitset and another one,\n// the current bitmap is modified\nFastBitSet.prototype.equals = function (otherbitmap) {\n  var mcount = Math.min(this.words.length, otherbitmap.words.length);\n  for (var k = 0 | 0; k < mcount; ++k) {\n    if (this.words[k] != otherbitmap.words[k]) return false;\n  }\n  if (this.words.length < otherbitmap.words.length) {\n    var c = otherbitmap.words.length;\n    for (var k = this.words.length; k < c; ++k) {\n      if (otherbitmap.words[k] != 0) return false;\n    }\n  } else if (otherbitmap.words.length < this.words.length) {\n    var c = this.words.length;\n    for (var k = otherbitmap.words.length; k < c; ++k) {\n      if (this.words[k] != 0) return false;\n    }\n  }\n  return true;\n};\n\n// Computes the difference between this bitset and another one,\n// the current bitset is modified (and returned by the function)\nFastBitSet.prototype.difference = function (otherbitmap) {\n  var newcount = Math.min(this.words.length, otherbitmap.words.length);\n  var k = 0 | 0;\n  for (; k + 7 < newcount; k += 8) {\n    this.words[k] &= ~otherbitmap.words[k];\n    this.words[k + 1] &= ~otherbitmap.words[k + 1];\n    this.words[k + 2] &= ~otherbitmap.words[k + 2];\n    this.words[k + 3] &= ~otherbitmap.words[k + 3];\n    this.words[k + 4] &= ~otherbitmap.words[k + 4];\n    this.words[k + 5] &= ~otherbitmap.words[k + 5];\n    this.words[k + 6] &= ~otherbitmap.words[k + 6];\n    this.words[k + 7] &= ~otherbitmap.words[k + 7];\n  }\n  for (; k < newcount; ++k) {\n    this.words[k] &= ~otherbitmap.words[k];\n  }\n  return this;\n};\n\n// Computes the difference between this bitset and another one,\n// a new bitmap is generated\nFastBitSet.prototype.new_difference = function (otherbitmap) {\n  return this.clone().difference(otherbitmap); // should be fast enough\n};\n\n// Computes the size of the difference between this bitset and another one\nFastBitSet.prototype.difference_size = function (otherbitmap) {\n  var newcount = Math.min(this.words.length, otherbitmap.words.length);\n  var answer = 0 | 0;\n  var k = 0 | 0;\n  for (; k < newcount; ++k) {\n    answer += this.hammingWeight(this.words[k] & ~otherbitmap.words[k]);\n  }\n  var c = this.words.length;\n  for (; k < c; ++k) {\n    answer += this.hammingWeight(this.words[k]);\n  }\n  return answer;\n};\n\n// Computes the changed elements (XOR) between this bitset and another one,\n// the current bitset is modified (and returned by the function)\nFastBitSet.prototype.change = function (otherbitmap) {\n  var mincount = Math.min(this.words.length, otherbitmap.words.length);\n  var k = 0 | 0;\n  for (; k + 7 < mincount; k += 8) {\n    this.words[k] ^= otherbitmap.words[k];\n    this.words[k + 1] ^= otherbitmap.words[k + 1];\n    this.words[k + 2] ^= otherbitmap.words[k + 2];\n    this.words[k + 3] ^= otherbitmap.words[k + 3];\n    this.words[k + 4] ^= otherbitmap.words[k + 4];\n    this.words[k + 5] ^= otherbitmap.words[k + 5];\n    this.words[k + 6] ^= otherbitmap.words[k + 6];\n    this.words[k + 7] ^= otherbitmap.words[k + 7];\n  }\n  for (; k < mincount; ++k) {\n    this.words[k] ^= otherbitmap.words[k];\n  }\n  // remaining words are all part of change\n  if (otherbitmap.words.length > this.words.length) {\n    // this.words = this.words.concat(otherbitmap.words.slice(k));\n    var maxcount = otherbitmap.words.length;\n    for (; k < maxcount; ++k) {\n      this.words[k] = otherbitmap.words[k];\n    }\n  }\n  return this;\n};\n\n// Computes the change between this bitset and another one,\n// a new bitmap is generated\nFastBitSet.prototype.new_change = function (otherbitmap) {\n  if (otherbitmap.words.length > this.words.length) {\n    return this.clone().change(otherbitmap);\n  } else {\n    return otherbitmap.clone().change(this);\n  }\n};\n\n// Computes the number of changed elements between this bitset and another one\nFastBitSet.prototype.change_size = function (otherbitmap) {\n  var mincount = Math.min(this.words.length, otherbitmap.words.length);\n  var answer = 0 | 0;\n  var k = 0 | 0;\n  for (; k < mincount; ++k) {\n    answer += this.hammingWeight(this.words[k] ^ otherbitmap.words[k]);\n  }\n  var longer =\n    this.words.length > otherbitmap.words.length ? this : otherbitmap;\n  var c = longer.words.length;\n  for (; k < c; ++k) {\n    answer += this.hammingWeight(longer.words[k]);\n  }\n  return answer;\n};\n\n// Returns a string representation\nFastBitSet.prototype.toString = function () {\n  return \"{\" + this.array().join(\",\") + \"}\";\n};\n\n// Computes the union between this bitset and another one,\n// the current bitset is modified  (and returned by the function)\nFastBitSet.prototype.union = function (otherbitmap) {\n  var mcount = Math.min(this.words.length, otherbitmap.words.length);\n  var k = 0 | 0;\n  for (; k + 7 < mcount; k += 8) {\n    this.words[k] |= otherbitmap.words[k];\n    this.words[k + 1] |= otherbitmap.words[k + 1];\n    this.words[k + 2] |= otherbitmap.words[k + 2];\n    this.words[k + 3] |= otherbitmap.words[k + 3];\n    this.words[k + 4] |= otherbitmap.words[k + 4];\n    this.words[k + 5] |= otherbitmap.words[k + 5];\n    this.words[k + 6] |= otherbitmap.words[k + 6];\n    this.words[k + 7] |= otherbitmap.words[k + 7];\n  }\n  for (; k < mcount; ++k) {\n    this.words[k] |= otherbitmap.words[k];\n  }\n  if (this.words.length < otherbitmap.words.length) {\n    this.resize((otherbitmap.words.length << 5) - 1);\n    var c = otherbitmap.words.length;\n    for (var k = mcount; k < c; ++k) {\n      this.words[k] = otherbitmap.words[k];\n    }\n  }\n  return this;\n};\n\nFastBitSet.prototype.new_union = function (otherbitmap) {\n  var answer = Object.create(FastBitSet.prototype);\n  var count = Math.max(this.words.length, otherbitmap.words.length);\n  answer.words = new Array(count);\n  var mcount = Math.min(this.words.length, otherbitmap.words.length);\n  var k = 0;\n  for (; k + 7 < mcount; k += 8) {\n    answer.words[k] = this.words[k] | otherbitmap.words[k];\n    answer.words[k + 1] = this.words[k + 1] | otherbitmap.words[k + 1];\n    answer.words[k + 2] = this.words[k + 2] | otherbitmap.words[k + 2];\n    answer.words[k + 3] = this.words[k + 3] | otherbitmap.words[k + 3];\n    answer.words[k + 4] = this.words[k + 4] | otherbitmap.words[k + 4];\n    answer.words[k + 5] = this.words[k + 5] | otherbitmap.words[k + 5];\n    answer.words[k + 6] = this.words[k + 6] | otherbitmap.words[k + 6];\n    answer.words[k + 7] = this.words[k + 7] | otherbitmap.words[k + 7];\n  }\n  for (; k < mcount; ++k) {\n    answer.words[k] = this.words[k] | otherbitmap.words[k];\n  }\n  var c = this.words.length;\n  for (var k = mcount; k < c; ++k) {\n    answer.words[k] = this.words[k];\n  }\n  var c2 = otherbitmap.words.length;\n  for (var k = mcount; k < c2; ++k) {\n    answer.words[k] = otherbitmap.words[k];\n  }\n  return answer;\n};\n\n// Computes the size union between this bitset and another one\nFastBitSet.prototype.union_size = function (otherbitmap) {\n  var mcount = Math.min(this.words.length, otherbitmap.words.length);\n  var answer = 0 | 0;\n  for (var k = 0 | 0; k < mcount; ++k) {\n    answer += this.hammingWeight(this.words[k] | otherbitmap.words[k]);\n  }\n  if (this.words.length < otherbitmap.words.length) {\n    var c = otherbitmap.words.length;\n    for (var k = this.words.length; k < c; ++k) {\n      answer += this.hammingWeight(otherbitmap.words[k] | 0);\n    }\n  } else {\n    var c = this.words.length;\n    for (var k = otherbitmap.words.length; k < c; ++k) {\n      answer += this.hammingWeight(this.words[k] | 0);\n    }\n  }\n  return answer;\n};\n\n///////////////\n\nmodule.exports = FastBitSet;\n","import FastBitSet from 'fastbitset';\nimport { Entity } from './entity';\n\nexport class Query {\n\tmask: FastBitSet;\n\tentities: Map<string, Entity> = new Map();\n\n\tconstructor(mask: FastBitSet) {\n\t\tthis.mask = mask;\n\t}\n}\n","import { World } from './world';\nimport { Component } from './component';\nimport FastBitSet from 'fastbitset';\n\nexport class Entity {\n\tworld: World;\n\tmask: FastBitSet;\n\tid: string;\n\tcomponents: Map<string, Component>;\n\tremoved: boolean = false;\n\n\tconstructor(id: string, world: World) {\n\t\tthis.world = world;\n\t\tthis.id = id;\n\t\tthis.mask = new FastBitSet();\n\t\tthis.components = new Map();\n\t}\n\n\tgetComponent<T extends Component>(ctor: new (...args: any[]) => T): T {\n\t\treturn this.components.get(ctor.name) as T;\n\t}\n\n\taddComponent(component: Component): Entity {\n\t\tconst bit = this.world.registerComponent(component.constructor.name);\n\t\tthis.mask.add(bit);\n\t\tthis.components.set(component.constructor.name, component);\n\t\tthis.world.updateQueries(this);\n\t\treturn this;\n\t}\n\n\tremoveComponent<T extends Component>(ctor: new () => T): void {\n\t\tconst bit = this.world.registerComponent(ctor.name);\n\t\tthis.mask.remove(bit);\n\t\tthis.components.delete(ctor.name);\n\t\tthis.world.updateQueries(this);\n\t}\n}\n","import FastBitSet from 'fastbitset';\nimport { Component } from './component';\nimport { Query } from './query';\nimport { Entity } from './entity';\nimport { System } from './system';\n\nexport class World {\n\tnextId: number = 1;\n\n\tcomponents: Map<string, number> = new Map();\n\tentities: Map<string, Entity> = new Map();\n\tqueries: Map<string, Query> = new Map();\n\tsystems: Map<string, System> = new Map();\n\n\tremovedEntities: Set<Entity> = new Set();\n\n\tregisterSystem(system: System): void {\n\t\tthis.systems.set(system.constructor.name, system);\n\t}\n\n\tupdate(...args: any) {\n\t\tfor (const system of this.systems.values()) {\n\t\t\tsystem.update(...args);\n\t\t}\n\t\tfor (const entity of this.removedEntities.values()) {\n\t\t\tfor (const query of this.queries.values()) {\n\t\t\t\tquery.entities.delete(entity.id);\n\t\t\t}\n\t\t\tthis.entities.delete(entity.id);\n\t\t}\n\t\tthis.removedEntities.clear();\n\t}\n\n\tupdateQueries(entity: Entity): void {\n\t\tfor (const query of this.queries.values()) {\n\t\t\tconst diff = query.mask.difference_size(entity.mask);\n\t\t\tconst has = query.entities.has(entity.id);\n\t\t\tif (!has && diff === 0) {\n\t\t\t\tquery.entities.set(entity.id, entity);\n\t\t\t} else if (has && diff !== 0) {\n\t\t\t\tquery.entities.delete(entity.id);\n\t\t\t}\n\t\t}\n\t}\n\n\tcreateQuery(ctors: (new (...args: any[]) => Component)[] = []): Query {\n\t\tconst mask = new FastBitSet();\n\t\tctors.forEach((ctor) => mask.add(this.registerComponent(ctor.name)));\n\n\t\tconst queryKey = mask.toString();\n\t\tlet query = this.queries.get(queryKey);\n\n\t\tif (!query) {\n\t\t\tquery = new Query(mask);\n\t\t\tfor (const entity of this.entities.values()) {\n\t\t\t\tif (mask.difference_size(entity.mask) === 0) query.entities.set(entity.id, entity);\n\t\t\t}\n\t\t\tthis.queries.set(queryKey, query);\n\t\t}\n\t\treturn query;\n\t}\n\n\tregisterComponent(componentId: string): number {\n\t\tlet bit = this.components.get(componentId);\n\t\tif (bit === undefined) {\n\t\t\tbit = this.components.size;\n\t\t\tthis.components.set(componentId, bit);\n\t\t}\n\t\treturn bit;\n\t}\n\n\tremoveEntity(entity: Entity) {\n\t\tentity.removed = true;\n\t\tthis.removedEntities.add(entity);\n\t}\n\n\taddEntity(entityId?: string): Entity {\n\t\tconst id = entityId ? entityId : (this.nextId++).toString();\n\t\tconst entity = new Entity(id, this);\n\t\tthis.entities.set(id, entity);\n\t\treturn entity;\n\t}\n}\n"],"names":["FastBitSet"],"mappings":"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"}